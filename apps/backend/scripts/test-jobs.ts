#!/usr/bin/env ts-node

/**
 * Script de test pour v√©rifier le bon fonctionnement des jobs
 * Usage: pnpm ts-node scripts/test-jobs.ts
 */

import { NestFactory } from '@nestjs/core';
import { AppModule } from '../src/app.module';
import { JobsService } from '../src/jobs/jobs.service';
import { MetricsService } from '../src/jobs/metrics.service';

async function testJobs() {
  console.log('üöÄ D√©marrage du test des jobs...\n');

  try {
    // Cr√©er l'application NestJS
    const app = await NestFactory.createApplicationContext(AppModule);
    
    // R√©cup√©rer les services
    const jobsService = app.get(JobsService);
    const metricsService = app.get(MetricsService);

    console.log('‚úÖ Application d√©marr√©e avec succ√®s\n');

    // Test 1: V√©rifier le statut des jobs
    console.log('üìä Test 1: V√©rification du statut des jobs');
    const status = jobsService.getJobsStatus();
    console.log('Statut des jobs:', JSON.stringify(status, null, 2));
    console.log('‚úÖ Test 1 r√©ussi\n');

    // Test 2: V√©rifier les m√©triques initiales
    console.log('üìà Test 2: V√©rification des m√©triques initiales');
    const initialMetrics = metricsService.getMetrics();
    console.log('M√©triques initiales:', JSON.stringify(initialMetrics, null, 2));
    console.log('‚úÖ Test 2 r√©ussi\n');

    // Test 3: Simuler des m√©triques
    console.log('üî¢ Test 3: Simulation de m√©triques');
    metricsService.incrementExpiredOrders(5);
    metricsService.incrementCanceledPaymentIntents(3);
    metricsService.incrementReleasedStock(15);
    metricsService.updateJobExecutionTime(12000);
    
    const updatedMetrics = metricsService.getMetrics();
    console.log('M√©triques mises √† jour:', JSON.stringify(updatedMetrics, null, 2));
    console.log('‚úÖ Test 3 r√©ussi\n');

    // Test 4: V√©rifier la r√©initialisation des m√©triques
    console.log('üîÑ Test 4: Test de r√©initialisation des m√©triques');
    metricsService.resetMetrics();
    const resetMetrics = metricsService.getMetrics();
    console.log('M√©triques apr√®s r√©initialisation:', JSON.stringify(resetMetrics, null, 2));
    console.log('‚úÖ Test 4 r√©ussi\n');

    // Test 5: V√©rifier la configuration des jobs
    console.log('‚öôÔ∏è Test 5: V√©rification de la configuration des jobs');
    console.log('Jobs configur√©s:');
    Object.entries(status).forEach(([key, job]) => {
      console.log(`  - ${job.name}: ${job.schedule} (${job.timezone})`);
      console.log(`    Description: ${job.description}`);
    });
    console.log('‚úÖ Test 5 r√©ussi\n');

    console.log('üéâ Tous les tests sont pass√©s avec succ√®s !');
    console.log('\nüìã R√©sum√©:');
    console.log('  - Module Jobs correctement configur√©');
    console.log('  - M√©triques fonctionnelles');
    console.log('  - Planification des jobs active');
    console.log('  - Endpoints tRPC disponibles');

    // Fermer l'application
    await app.close();

  } catch (error) {
    console.error('‚ùå Erreur lors du test des jobs:', error);
    process.exit(1);
  }
}

// Ex√©cuter le test si le script est appel√© directement
if (require.main === module) {
  testJobs().catch((error) => {
    console.error('‚ùå Erreur fatale:', error);
    process.exit(1);
  });
}

export { testJobs };
