#!/usr/bin/env ts-node

/**
 * Script de test minimal pour v√©rifier le bon fonctionnement des services des jobs
 * Usage: pnpm ts-node scripts/test-jobs-minimal.ts
 */

import { MetricsService } from '../src/jobs/metrics.service';

async function testJobsMinimal() {
  console.log('üöÄ D√©marrage du test minimal des jobs...\n');

  try {
    // Test 1: Cr√©er et tester le MetricsService
    console.log('üìä Test 1: Test du MetricsService');
    const metricsService = new MetricsService();
    
    // V√©rifier les m√©triques initiales
    const initialMetrics = metricsService.getMetrics();
    console.log('M√©triques initiales:', JSON.stringify(initialMetrics, null, 2));
    console.log('‚úÖ Test 1 r√©ussi\n');

    // Test 2: Simuler des m√©triques
    console.log('üî¢ Test 2: Simulation de m√©triques');
    metricsService.incrementExpiredOrders(5);
    metricsService.incrementCanceledPaymentIntents(3);
    metricsService.incrementReleasedStock(15);
    metricsService.updateJobExecutionTime(12000);
    
    const updatedMetrics = metricsService.getMetrics();
    console.log('M√©triques mises √† jour:', JSON.stringify(updatedMetrics, null, 2));
    console.log('‚úÖ Test 2 r√©ussi\n');

    // Test 3: V√©rifier la r√©initialisation des m√©triques
    console.log('üîÑ Test 3: Test de r√©initialisation des m√©triques');
    metricsService.resetMetrics();
    const resetMetrics = metricsService.getMetrics();
    console.log('M√©triques apr√®s r√©initialisation:', JSON.stringify(resetMetrics, null, 2));
    console.log('‚úÖ Test 3 r√©ussi\n');

    // Test 4: V√©rifier l'accumulation des m√©triques
    console.log('üìà Test 4: Test d\'accumulation des m√©triques');
    metricsService.incrementExpiredOrders(10);
    metricsService.incrementExpiredOrders(5);
    metricsService.incrementCanceledPaymentIntents(7);
    metricsService.incrementReleasedStock(25);
    
    const finalMetrics = metricsService.getMetrics();
    console.log('M√©triques finales:', JSON.stringify(finalMetrics, null, 2));
    
    // V√©rifications
    if (finalMetrics.paymentsExpiredTotal === 15) {
      console.log('‚úÖ Compteur des commandes expir√©es correct');
    } else {
      throw new Error(`Compteur incorrect: ${finalMetrics.paymentsExpiredTotal} au lieu de 15`);
    }
    
    if (finalMetrics.paymentIntentsCanceledTotal === 7) {
      console.log('‚úÖ Compteur des PIs annul√©s correct');
    } else {
      throw new Error(`Compteur incorrect: ${finalMetrics.paymentIntentsCanceledTotal} au lieu de 7`);
    }
    
    if (finalMetrics.stockReleasedTotal === 25) {
      console.log('‚úÖ Compteur du stock lib√©r√© correct');
    } else {
      throw new Error(`Compteur incorrect: ${finalMetrics.stockReleasedTotal} au lieu de 25`);
    }
    
    console.log('‚úÖ Test 4 r√©ussi\n');

    console.log('üéâ Tous les tests sont pass√©s avec succ√®s !');
    console.log('\nüìã R√©sum√©:');
    console.log('  - MetricsService fonctionne correctement');
    console.log('  - Compteurs s\'incr√©mentent correctement');
    console.log('  - R√©initialisation fonctionne');
    console.log('  - Accumulation des m√©triques OK');

  } catch (error) {
    console.error('‚ùå Erreur lors du test des jobs:', error);
    process.exit(1);
  }
}

// Ex√©cuter le test si le script est appel√© directement
if (require.main === module) {
  testJobsMinimal().catch((error) => {
    console.error('‚ùå Erreur fatale:', error);
    process.exit(1);
  });
}

export { testJobsMinimal };
