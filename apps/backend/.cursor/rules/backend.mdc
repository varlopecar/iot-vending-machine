# Backend

The backend is built in NestJS and uses tRPC to expose typed APIs to both the web and mobile front-ends. PostgreSQL is used as the primary data store. Prisma is used as the ORM. We use pnpm as our package manager.

The backend manages:

- Users, products, machines, and real-time stocks,
- Orders (linked to up to 2 products),
- QR code token generation (UUID or secure hash),
- Loyalty point calculation and logging,
- Admin logs and expired command handling.

When a user places an order, stock is decremented immediately. If the order is not picked up before `expires_at`, it is marked as expired and the stock is restored. QR code tokens are single-use only, and validated server-side with status and expiry checks.

Admins can monitor operations via the activity_logs table and consult all data from a back-office interface. All endpoints must be secured and tested thoroughly.

## NestJS Module Best Practices

When creating NestJS modules, always follow these dependency injection rules:

- **Export Services**: If a service is injected into another module's service, it MUST be exported from its module
- **Import Dependencies**: Modules that need services from other modules must import those modules
- **Check Dependencies**: Before creating a service that injects another service, verify the target service is exported

Example of correct module structure:

```typescript
@Module({
  imports: [OtherModule], // Import modules you depend on
  providers: [MyService, MyRouter],
  exports: [MyService], // Export services that other modules need
})
export class MyModule {}
```

## Zod Schema Best Practices

When working with Zod schemas, use the modern syntax to avoid deprecation warnings:

- Use `z.uuid()` instead of `z.string().uuid()`
- Use `z.email()` instead of `z.string().email()`
- Use `z.url()` instead of `z.string().url()`
- Use `z.date()` instead of `z.string().datetime()`

This prevents the deprecated string method warnings and follows current Zod best practices.
