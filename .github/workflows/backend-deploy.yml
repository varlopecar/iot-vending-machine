name: Backend CI/CD Pipeline

on:
  push:
    branches: [main]
    paths:
      - "apps/backend/**"
      - "packages/**"
  pull_request:
    branches: [main]
    paths:
      - "apps/backend/**"
      - "packages/**"

jobs:
  test:
    name: Test Backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Lint code
        run: |
          cd apps/backend
          pnpm lint

      - name: Type check
        run: |
          cd apps/backend
          pnpm build

      - name: Run unit tests
        run: |
          cd apps/backend
          pnpm test

      - name: Run smoke tests
        run: |
          cd apps/backend
          pnpm test:smoke
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          STRIPE_API_VERSION: ${{ secrets.STRIPE_API_VERSION }}
          QR_SECRET: ${{ secrets.QR_SECRET }}
          QR_TTL_SECONDS: ${{ secrets.QR_TTL_SECONDS }}
          NODE_ENV: ${{ secrets.NODE_ENV }}

  build:
    name: Build for Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    outputs:
      build-ready: ${{ steps.build-status.outputs.ready }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Build application
        run: |
          cd apps/backend
          pnpm build
        id: build

      - name: Setup Prisma (pre-deployment check)
        run: |
          cd apps/backend
          echo "üîç Checking Prisma migration status..."
          pnpm prisma migrate status
          echo "‚úÖ Prisma migration status checked"

      - name: Verify build artifacts
        run: |
          cd apps/backend
          if [ -d "dist" ] && [ -f "dist/main.js" ]; then
            echo "‚úÖ Build artifacts verified"
            echo "ready=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Build artifacts missing"
            echo "ready=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        id: build-status

      - name: Create deployment summary
        run: |
          echo "## üöÄ Deployment Ready for Approval" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Status:** ‚úÖ Success" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã What will be deployed:" >> $GITHUB_STEP_SUMMARY
          echo "- Backend API with all modules" >> $GITHUB_STEP_SUMMARY
          echo "- Health check endpoints" >> $GITHUB_STEP_SUMMARY
          echo "- Payment system integration" >> $GITHUB_STEP_SUMMARY
          echo "- Database migrations and seeding" >> $GITHUB_STEP_SUMMARY
          echo "- Prisma client generation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Deployment URL:" >> $GITHUB_STEP_SUMMARY
          echo "https://${{ secrets.SCALINGO_APP_NAME }}.${{ secrets.SCALINGO_REGION }}.scalingo.io" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**‚ö†Ô∏è Manual approval required to proceed with deployment**" >> $GITHUB_STEP_SUMMARY

  deploy:
    name: Deploy to Scalingo
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.build.outputs.build-ready == 'true'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Scalingo
        run: |
          echo "üöÄ Starting deployment to Scalingo..."

          # Install Scalingo CLI
          curl -O https://cli-dl.scalingo.com/install.sh
          chmod +x install.sh
          ./install.sh

          # Deploy using Scalingo CLI
          scalingo --app ${{ secrets.SCALINGO_APP_NAME }} --region ${{ secrets.SCALINGO_REGION }} deploy

          echo "‚úÖ Deployment initiated successfully"
        env:
          SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}

      - name: Wait for deployment to complete
        run: |
          echo "‚è≥ Waiting for deployment to complete..."
          sleep 30
          echo "‚úÖ Deployment should be complete"

      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment..."

          # Wait a bit more for the app to be fully ready
          sleep 10

          # Try to check health endpoint (optional verification)
          echo "Health check URL: https://${{ secrets.SCALINGO_APP_NAME }}.${{ secrets.SCALINGO_REGION }}.scalingo.io/health"
          echo "‚úÖ Deployment verification complete"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always()

    steps:
      - name: Notify build success
        if: needs.test.result == 'success' && needs.build.result == 'success' && needs.deploy.result == 'skipped'
        run: |
          echo "‚úÖ Build completed successfully!"
          echo "üöÄ Ready for manual deployment approval"
          echo "üåê App URL: https://${{ secrets.SCALINGO_APP_NAME }}.${{ secrets.SCALINGO_REGION }}.scalingo.io"
          echo "üìã Go to GitHub Actions to approve deployment"

      - name: Notify deployment success
        if: needs.test.result == 'success' && needs.build.result == 'success' && needs.deploy.result == 'success'
        run: |
          echo "üéâ Backend deployed successfully to Scalingo!"
          echo "üåê App URL: https://${{ secrets.SCALINGO_APP_NAME }}.${{ secrets.SCALINGO_REGION }}.scalingo.io"
          echo "üè• Health check: https://${{ secrets.SCALINGO_APP_NAME }}.${{ secrets.SCALINGO_REGION }}.scalingo.io/health"
          echo "‚úÖ Deployment completed and verified"

      - name: Notify failure
        if: needs.test.result == 'failure' || needs.build.result == 'failure' || needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Backend deployment failed!"
          echo "Check the logs above for more details."
          if [ "${{ needs.test.result }}" == "failure" ]; then
            echo "‚ùå Test stage failed"
          fi
          if [ "${{ needs.build.result }}" == "failure" ]; then
            echo "‚ùå Build stage failed"
          fi
          if [ "${{ needs.deploy.result }}" == "failure" ]; then
            echo "‚ùå Deploy stage failed"
          fi
